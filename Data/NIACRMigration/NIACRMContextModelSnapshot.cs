// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NIA_CRM.Data;

#nullable disable

namespace NIA_CRM.Data.NIACRMigration
{
    [DbContext(typeof(NIACRMContext))]
    partial class NIACRMContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("NIA_CRM.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("StateProvince")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("NIA_CRM.Models.AnnualAction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AnnualStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Asignee")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("AnnualAction");
                });

            modelBuilder.Entity("NIA_CRM.Models.Cancellation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CancellationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CancellationNote")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MemberID")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("MemberID");

                    b.ToTable("Cancellations");
                });

            modelBuilder.Entity("NIA_CRM.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactNote")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsArchieved")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVip")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LinkedInUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("Title")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("NIA_CRM.Models.ContactCancellation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CancellationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CancellationNote")
                        .HasColumnType("TEXT");

                    b.Property<int>("ContactID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.ToTable("ContactCancellations");
                });

            modelBuilder.Entity("NIA_CRM.Models.ContactLogo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContactID")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Content")
                        .HasColumnType("BLOB");

                    b.Property<string>("MimeType")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ContactID")
                        .IsUnique();

                    b.ToTable("ContactLogos");
                });

            modelBuilder.Entity("NIA_CRM.Models.ContactThumbnail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContactID")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Content")
                        .HasColumnType("BLOB");

                    b.Property<string>("MimeType")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ContactID")
                        .IsUnique();

                    b.ToTable("ContactThumbnails");
                });

            modelBuilder.Entity("NIA_CRM.Models.DashboardLayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LayoutData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DashboardLayouts");
                });

            modelBuilder.Entity("NIA_CRM.Models.IndustryNAICSCode", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NAICSCodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("MemberId", "NAICSCodeId");

                    b.HasIndex("NAICSCodeId");

                    b.ToTable("IndustryNAICSCodes");
                });

            modelBuilder.Entity("NIA_CRM.Models.Interaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContactId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("InteractionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("InteractionNotes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OpportunityId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("MemberId");

                    b.HasIndex("OpportunityId");

                    b.ToTable("Interactions");
                });

            modelBuilder.Entity("NIA_CRM.Models.MEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventLocation")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MEvents");
                });

            modelBuilder.Entity("NIA_CRM.Models.MTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MTagDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("MTagName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.ToTable("MTag");
                });

            modelBuilder.Entity("NIA_CRM.Models.Member", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AddressID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("MemberNote")
                        .HasColumnType("TEXT");

                    b.Property<int>("MemberSize")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("MemberName")
                        .IsUnique();

                    b.ToTable("Members");
                });

            modelBuilder.Entity("NIA_CRM.Models.MemberContact", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContactId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("MemberId", "ContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("MemberContacts");
                });

            modelBuilder.Entity("NIA_CRM.Models.MemberEvent", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MEventID")
                        .HasColumnType("INTEGER");

                    b.HasKey("MemberId", "MEventID");

                    b.HasIndex("MEventID");

                    b.ToTable("MemberEvents");
                });

            modelBuilder.Entity("NIA_CRM.Models.MemberLogo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Content")
                        .HasColumnType("BLOB");

                    b.Property<int>("MemberID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MimeType")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("MemberID")
                        .IsUnique();

                    b.ToTable("MemberLogos");
                });

            modelBuilder.Entity("NIA_CRM.Models.MemberMembershipType", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MembershipTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MemberId", "MembershipTypeId");

                    b.HasIndex("MembershipTypeId");

                    b.ToTable("MemberMembershipTypes");
                });

            modelBuilder.Entity("NIA_CRM.Models.MemberSector", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SectorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("MemberId", "SectorId");

                    b.HasIndex("SectorId");

                    b.ToTable("MemberSectors");
                });

            modelBuilder.Entity("NIA_CRM.Models.MemberTag", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MTagID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("MemberId", "MTagID");

                    b.HasIndex("MTagID");

                    b.ToTable("MemberTags");
                });

            modelBuilder.Entity("NIA_CRM.Models.MemberThumbnail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Content")
                        .HasColumnType("BLOB");

                    b.Property<int>("MemberID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MimeType")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("MemberID")
                        .IsUnique();

                    b.ToTable("MemebrThumbnails");
                });

            modelBuilder.Entity("NIA_CRM.Models.MembershipType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("TypeDescr")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MembershipTypes");
                });

            modelBuilder.Entity("NIA_CRM.Models.NAICSCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NAICSCodes");
                });

            modelBuilder.Entity("NIA_CRM.Models.Opportunity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Account")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Interaction")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastContact")
                        .HasColumnType("TEXT");

                    b.Property<string>("OpportunityAction")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OpportunityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("OpportunityPriority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OpportunityStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("POC")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Opportunities");
                });

            modelBuilder.Entity("NIA_CRM.Models.ProductionEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmailType")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductionEmails");
                });

            modelBuilder.Entity("NIA_CRM.Models.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("SectorDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("SectorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("NIA_CRM.Models.Strategy", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("StrategyAssignee")
                        .HasColumnType("TEXT");

                    b.Property<string>("StrategyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StrategyNote")
                        .HasColumnType("TEXT");

                    b.Property<int>("StrategyStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StrategyTerm")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Strategy");
                });

            modelBuilder.Entity("NIA_CRM.Models.WidgetLayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOnDashboard")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PositionX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PositionY")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WidgetId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Width")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("WidgetLayouts");
                });

            modelBuilder.Entity("NIA_CRM.Models.Address", b =>
                {
                    b.HasOne("NIA_CRM.Models.Member", "Member")
                        .WithOne("Address")
                        .HasForeignKey("NIA_CRM.Models.Address", "MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("NIA_CRM.Models.Cancellation", b =>
                {
                    b.HasOne("NIA_CRM.Models.Member", "Member")
                        .WithMany("Cancellations")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("NIA_CRM.Models.ContactCancellation", b =>
                {
                    b.HasOne("NIA_CRM.Models.Contact", "Contact")
                        .WithMany("ContactCancellations")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("NIA_CRM.Models.ContactLogo", b =>
                {
                    b.HasOne("NIA_CRM.Models.Contact", "Contact")
                        .WithOne("ContactLogo")
                        .HasForeignKey("NIA_CRM.Models.ContactLogo", "ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("NIA_CRM.Models.ContactThumbnail", b =>
                {
                    b.HasOne("NIA_CRM.Models.Contact", "Contact")
                        .WithOne("ContactThumbnail")
                        .HasForeignKey("NIA_CRM.Models.ContactThumbnail", "ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("NIA_CRM.Models.IndustryNAICSCode", b =>
                {
                    b.HasOne("NIA_CRM.Models.Member", "Member")
                        .WithMany("IndustryNAICSCodes")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NIA_CRM.Models.NAICSCode", "NAICSCode")
                        .WithMany("IndustryNAICSCodes")
                        .HasForeignKey("NAICSCodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("NAICSCode");
                });

            modelBuilder.Entity("NIA_CRM.Models.Interaction", b =>
                {
                    b.HasOne("NIA_CRM.Models.Contact", "Contact")
                        .WithMany("Interactions")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NIA_CRM.Models.Member", "Member")
                        .WithMany("Interactions")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NIA_CRM.Models.Opportunity", "Opportunity")
                        .WithMany()
                        .HasForeignKey("OpportunityId");

                    b.Navigation("Contact");

                    b.Navigation("Member");

                    b.Navigation("Opportunity");
                });

            modelBuilder.Entity("NIA_CRM.Models.MemberContact", b =>
                {
                    b.HasOne("NIA_CRM.Models.Contact", "Contact")
                        .WithMany("MemberContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NIA_CRM.Models.Member", "Member")
                        .WithMany("MemberContacts")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("NIA_CRM.Models.MemberEvent", b =>
                {
                    b.HasOne("NIA_CRM.Models.MEvent", "MEvent")
                        .WithMany("MemberEvents")
                        .HasForeignKey("MEventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NIA_CRM.Models.Member", "Member")
                        .WithMany("MemberEvents")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MEvent");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("NIA_CRM.Models.MemberLogo", b =>
                {
                    b.HasOne("NIA_CRM.Models.Member", "Member")
                        .WithOne("MemberLogo")
                        .HasForeignKey("NIA_CRM.Models.MemberLogo", "MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("NIA_CRM.Models.MemberMembershipType", b =>
                {
                    b.HasOne("NIA_CRM.Models.Member", "Member")
                        .WithMany("MemberMembershipTypes")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NIA_CRM.Models.MembershipType", "MembershipType")
                        .WithMany("MemberMembershipTypes")
                        .HasForeignKey("MembershipTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("MembershipType");
                });

            modelBuilder.Entity("NIA_CRM.Models.MemberSector", b =>
                {
                    b.HasOne("NIA_CRM.Models.Member", "Member")
                        .WithMany("MemberSectors")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NIA_CRM.Models.Sector", "Sector")
                        .WithMany("MemberSectors")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("NIA_CRM.Models.MemberTag", b =>
                {
                    b.HasOne("NIA_CRM.Models.MTag", "MTag")
                        .WithMany("MemberTags")
                        .HasForeignKey("MTagID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NIA_CRM.Models.Member", "Member")
                        .WithMany("MemberTags")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MTag");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("NIA_CRM.Models.MemberThumbnail", b =>
                {
                    b.HasOne("NIA_CRM.Models.Member", "Member")
                        .WithOne("MemberThumbnail")
                        .HasForeignKey("NIA_CRM.Models.MemberThumbnail", "MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("NIA_CRM.Models.Contact", b =>
                {
                    b.Navigation("ContactCancellations");

                    b.Navigation("ContactLogo");

                    b.Navigation("ContactThumbnail");

                    b.Navigation("Interactions");

                    b.Navigation("MemberContacts");
                });

            modelBuilder.Entity("NIA_CRM.Models.MEvent", b =>
                {
                    b.Navigation("MemberEvents");
                });

            modelBuilder.Entity("NIA_CRM.Models.MTag", b =>
                {
                    b.Navigation("MemberTags");
                });

            modelBuilder.Entity("NIA_CRM.Models.Member", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Cancellations");

                    b.Navigation("IndustryNAICSCodes");

                    b.Navigation("Interactions");

                    b.Navigation("MemberContacts");

                    b.Navigation("MemberEvents");

                    b.Navigation("MemberLogo");

                    b.Navigation("MemberMembershipTypes");

                    b.Navigation("MemberSectors");

                    b.Navigation("MemberTags");

                    b.Navigation("MemberThumbnail");
                });

            modelBuilder.Entity("NIA_CRM.Models.MembershipType", b =>
                {
                    b.Navigation("MemberMembershipTypes");
                });

            modelBuilder.Entity("NIA_CRM.Models.NAICSCode", b =>
                {
                    b.Navigation("IndustryNAICSCodes");
                });

            modelBuilder.Entity("NIA_CRM.Models.Sector", b =>
                {
                    b.Navigation("MemberSectors");
                });
#pragma warning restore 612, 618
        }
    }
}
